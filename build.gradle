import com.modrinth.minotaur.dependencies.ModDependency
import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.12.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

loom {
    accessWidenerPath = file("src/main/resources/cubecontroller.accesswidener")
}

def CHANGELOG = new File('CHANGELOG.md').exists() ? new File('CHANGELOG.md').text : "No changelog provided"

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name "ClothConfigAPI"
        url "https://maven.shedaniel.me/"
    }
    maven {
        name "ModMenu"
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name "Crowdin Translate"
        url "https://minecraft.guntram.de/maven/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include modImplementation("de.guntram.mcmod:crowdin-translate:1.4+1.18.2")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

build.dependsOn remapMavenJar

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        //mavenLocal()
        maven {
            url = System.getenv().MAVEN_REPO
            credentials(HttpHeaderCredentials) {
                name System.getenv().MAVEN_AUTH_HEADER
                value System.getenv().MAVEN_AUTH_TOKEN
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

tasks.modrinth.dependsOn(tasks.remapMavenJar)

modrinth {
    token = System.getenv().MODRINTH_TOKEN
    projectId = "VqrLRUE8"
    versionName = "[$project.minecraft_version] CubeController - $project.version"
    changelog = CHANGELOG ?: "No changelog provided"
    uploadFile = remapJar
    dependencies = [
            new ModDependency("P7dR8mSH", "required") //FabricAPI
    ]
}
